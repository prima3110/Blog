{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\GoIT\\\\\\u0421\\u043F\\u0456\\u0432\\u0431\\u0435\\u0441\\u0456\\u0434\\u0430\\\\\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u0456 \\u0437\\u0430\\u0432\\u0434\\u0430\\u043D\\u043D\\u044F\\\\\\u041C\\u0435\\u043D\\u0456 \\u0437\\u0430\\u043F\\u0440\\u043E\\u043F\\u043E\\u043D\\u0443\\u0432\\u0430\\u043B\\u0438\\\\DevelopsToday\\\\Blog\\\\Blog\\\\pages\\\\Posts\\\\[id].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport Post from '../../components/Post/Post';\nimport * as blogSelectors from '../../redux/blog/blogSelectors';\nimport * as blogOperations from '../../redux/blog/blogOperations';\nimport Loader from '../..//components/Loader/Loader';\n\nvar PostPage = function PostPage(_ref) {\n  _s();\n\n  var postById = _ref.postById,\n      getPost = _ref.getPost,\n      isLoading = _ref.isLoading;\n  var router = useRouter();\n  var id = router.query.id;\n  useEffect(function () {\n    getPost(+id);\n  }, [getPost, id]);\n  return __jsx(React.Fragment, null, isLoading && __jsx(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 27\n    }\n  }), postById && __jsx(Post, {\n    post: postById,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 26\n    }\n  }));\n};\n\n_s(PostPage, \"vQduR7x+OPXj6PSmJyFnf+hU7bg=\", false, function () {\n  return [useRouter];\n});\n\n_c = PostPage;\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    postById: blogSelectors.getPost(store),\n    isLoading: blogSelectors.getLoader(store)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getPost: function getPost(id) {\n      return dispatch(blogOperations.getPost(+id));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"sources":["D:/GoIT/Співбесіда/Тестові завдання/Мені запропонували/DevelopsToday/Blog/Blog/pages/Posts/[id].tsx"],"names":["React","useEffect","connect","useRouter","Post","blogSelectors","blogOperations","Loader","PostPage","postById","getPost","isLoading","router","id","query","mapStateToProps","store","getLoader","mapDispatchToProps","dispatch"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,IAAP,MAAiB,4BAAjB;AACA,OAAO,KAAKC,aAAZ,MAA+B,gCAA/B;AACA,OAAO,KAAKC,cAAZ,MAAgC,iCAAhC;AAEA,OAAOC,MAAP,MAAmB,iCAAnB;;AAiBA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAkE;AAAA;;AAAA,MAA/DC,QAA+D,QAA/DA,QAA+D;AAAA,MAArDC,OAAqD,QAArDA,OAAqD;AAAA,MAA5CC,SAA4C,QAA5CA,SAA4C;AAC/E,MAAMC,MAAM,GAAGT,SAAS,EAAxB;AAD+E,MAEvEU,EAFuE,GAEhED,MAAM,CAACE,KAFyD,CAEvED,EAFuE;AAI/EZ,EAAAA,SAAS,CAAC,YAAM;AACZS,IAAAA,OAAO,CAAC,CAACG,EAAF,CAAP;AACH,GAFQ,EAEN,CAACH,OAAD,EAAUG,EAAV,CAFM,CAAT;AAIA,SACI,4BACKF,SAAS,IAAI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADlB,EAEKF,QAAQ,IAAI,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFjB,CADJ;AAMH,CAdD;;GAAMD,Q;UACaL,S;;;KADbK,Q;;AAgBN,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAmC;AACvDP,IAAAA,QAAQ,EAAEJ,aAAa,CAACK,OAAd,CAAsBM,KAAtB,CAD6C;AAEvDL,IAAAA,SAAS,EAAEN,aAAa,CAACY,SAAd,CAAwBD,KAAxB;AAF4C,GAAnC;AAAA,CAAxB;;AAKA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,SAAoC;AAC3DT,IAAAA,OAAO,EAAE,iBAACG,EAAD;AAAA,aAAsBM,QAAQ,CAACb,cAAc,CAACI,OAAf,CAAuB,CAACG,EAAxB,CAAD,CAA9B;AAAA;AADkD,GAApC;AAAA,CAA3B;;AAIA,eAAeX,OAAO,CAACa,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CV,QAA7C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport Post from '../../components/Post/Post';\nimport * as blogSelectors from '../../redux/blog/blogSelectors';\nimport * as blogOperations from '../../redux/blog/blogOperations';\nimport * as types from '../../redux/blog/blogTypes';\nimport Loader from '../..//components/Loader/Loader';\n\ninterface MDTP {\n    getPost: (id: number) => void;\n}\n\ninterface MSTP {\n    postById: types.PostType;\n    isLoading: boolean;\n}\n\ninterface PostPageProps {\n    postById: types.PostType;\n    getPost: (id: number) => void;\n    isLoading: boolean;\n}\n\nconst PostPage = ({ postById, getPost, isLoading }: PostPageProps): JSX.Element => {\n    const router = useRouter();\n    const { id } = router.query;\n\n    useEffect(() => {\n        getPost(+id);\n    }, [getPost, id]);\n\n    return (\n        <>\n            {isLoading && <Loader />}\n            {postById && <Post post={postById} />}\n        </>\n    );\n};\n\nconst mapStateToProps = (store: types.StoreType): MSTP => ({\n    postById: blogSelectors.getPost(store),\n    isLoading: blogSelectors.getLoader(store),\n});\n\nconst mapDispatchToProps = (dispatch: (any) => void): MDTP => ({\n    getPost: (id: number): void => dispatch(blogOperations.getPost(+id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostPage);\n"]},"metadata":{},"sourceType":"module"}