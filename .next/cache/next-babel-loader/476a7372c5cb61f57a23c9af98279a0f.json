{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\GoIT\\\\\\u0421\\u043F\\u0456\\u0432\\u0431\\u0435\\u0441\\u0456\\u0434\\u0430\\\\\\u0422\\u0435\\u0441\\u0442\\u043E\\u0432\\u0456 \\u0437\\u0430\\u0432\\u0434\\u0430\\u043D\\u043D\\u044F\\\\\\u041C\\u0435\\u043D\\u0456 \\u0437\\u0430\\u043F\\u0440\\u043E\\u043F\\u043E\\u043D\\u0443\\u0432\\u0430\\u043B\\u0438\\\\DevelopsToday\\\\Blog\\\\Blog\\\\components\\\\CreatePost\\\\CreatePost.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport * as blogOperations from '../../redux/blog/blogOperations';\nimport { Form, Textarea, Input, Button } from './CreatePost.styled';\nimport Loader from '../Loader/Loader';\n\nvar CreatePost = function CreatePost(_ref) {\n  _s();\n\n  var addPost = _ref.addPost,\n      isLoading = _ref.isLoading;\n\n  var _useState = useState(''),\n      input = _useState[0],\n      setInput = _useState[1];\n\n  var _useState2 = useState(''),\n      textarea = _useState2[0],\n      setTextarea = _useState2[1];\n\n  var onChangeInput = function onChangeInput(e) {\n    setInput(e.target.value);\n  };\n\n  var onChangeTextarea = function onChangeTextarea(e) {\n    setTextarea(e.target.value);\n  };\n\n  var reset = function reset() {\n    setInput('');\n    setTextarea('');\n  };\n\n  var onSubmitForm = function onSubmitForm(e) {\n    e.preventDefault();\n\n    if (input && textarea) {\n      var newPost = {\n        title: input,\n        body: textarea\n      };\n      addPost(newPost);\n      reset();\n      alert('Your post successfully added!');\n    }\n  };\n\n  return __jsx(React.Fragment, null, isLoading && __jsx(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 27\n    }\n  }), __jsx(Form, {\n    onSubmit: onSubmitForm,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, __jsx(Input, {\n    placeholder: \"Enter your title here\",\n    value: input,\n    onChange: onChangeInput,\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }), __jsx(Textarea, {\n    rows: \"20\",\n    cols: \"20\",\n    name: \"text\",\n    placeholder: \"Enter your body here\",\n    value: textarea,\n    onChange: onChangeTextarea,\n    required: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }), __jsx(Button, {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, \"Add New Post\")));\n};\n\n_s(CreatePost, \"0OWL0rTe7rhz3CwJOA/mqoFibgI=\");\n\n_c = CreatePost;\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    isLoading: blogSelectors.getLoader(store)\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    addPost: function addPost(post) {\n      return dispatch(blogOperations.createPost(post));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreatePost);\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePost\");","map":{"version":3,"sources":["D:/GoIT/Співбесіда/Тестові завдання/Мені запропонували/DevelopsToday/Blog/Blog/components/CreatePost/CreatePost.tsx"],"names":["React","useState","connect","blogOperations","Form","Textarea","Input","Button","Loader","CreatePost","addPost","isLoading","input","setInput","textarea","setTextarea","onChangeInput","e","target","value","onChangeTextarea","reset","onSubmitForm","preventDefault","newPost","title","body","alert","mapStateToProps","store","blogSelectors","getLoader","mapDispatchToProps","dispatch","post","createPost"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,cAAZ,MAAgC,iCAAhC;AAEA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,KAAzB,EAAgCC,MAAhC,QAA8C,qBAA9C;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;AAOA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAA8C;AAAA;;AAAA,MAA3CC,OAA2C,QAA3CA,OAA2C;AAAA,MAAlCC,SAAkC,QAAlCA,SAAkC;;AAAA,kBACnCV,QAAQ,CAAC,EAAD,CAD2B;AAAA,MACtDW,KADsD;AAAA,MAC/CC,QAD+C;;AAAA,mBAE7BZ,QAAQ,CAAC,EAAD,CAFqB;AAAA,MAEtDa,QAFsD;AAAA,MAE5CC,WAF4C;;AAI7D,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,CAAD,EAAa;AAC/BJ,IAAAA,QAAQ,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACH,GAFD;;AAIA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACH,CAAD,EAAa;AAClCF,IAAAA,WAAW,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACH,GAFD;;AAIA,MAAME,KAAK,GAAG,SAARA,KAAQ,GAAY;AACtBR,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,IAAAA,WAAW,CAAC,EAAD,CAAX;AACH,GAHD;;AAKA,MAAMO,YAAY,GAAG,SAAfA,YAAe,CAACL,CAAD,EAAa;AAC9BA,IAAAA,CAAC,CAACM,cAAF;;AACA,QAAIX,KAAK,IAAIE,QAAb,EAAuB;AACnB,UAAMU,OAAO,GAAG;AACZC,QAAAA,KAAK,EAAEb,KADK;AAEZc,QAAAA,IAAI,EAAEZ;AAFM,OAAhB;AAIAJ,MAAAA,OAAO,CAACc,OAAD,CAAP;AACAH,MAAAA,KAAK;AACLM,MAAAA,KAAK,CAAC,+BAAD,CAAL;AACH;AACJ,GAXD;;AAaA,SACI,4BACKhB,SAAS,IAAI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADlB,EAEI,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEW,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD;AAAO,IAAA,WAAW,EAAC,uBAAnB;AAA2C,IAAA,KAAK,EAAEV,KAAlD;AAAyD,IAAA,QAAQ,EAAEI,aAAnE;AAAkF,IAAA,QAAQ,MAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,QAAD;AACI,IAAA,IAAI,EAAC,IADT;AAEI,IAAA,IAAI,EAAC,IAFT;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,WAAW,EAAC,sBAJhB;AAKI,IAAA,KAAK,EAAEF,QALX;AAMI,IAAA,QAAQ,EAAEM,gBANd;AAOI,IAAA,QAAQ,MAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAWI,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXJ,CAFJ,CADJ;AAkBH,CAhDD;;GAAMX,U;;KAAAA,U;;AAkDN,IAAMmB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAiB;AACrClB,IAAAA,SAAS,EAAEmB,aAAa,CAACC,SAAd,CAAwBF,KAAxB;AAD0B,GAAjB;AAAA,CAAxB;;AAIA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,SAAoB;AAC3CvB,IAAAA,OAAO,EAAE,iBAACwB,IAAD;AAAA,aAAgBD,QAAQ,CAAC9B,cAAc,CAACgC,UAAf,CAA0BD,IAA1B,CAAD,CAAxB;AAAA;AADkC,GAApB;AAAA,CAA3B;;AAIA,eAAehC,OAAO,CAAC0B,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CvB,UAA7C,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport * as blogOperations from '../../redux/blog/blogOperations';\n\nimport { Form, Textarea, Input, Button } from './CreatePost.styled';\nimport Loader from '../Loader/Loader';\n\ninterface MTP {\n    addPost?: (post) => void;\n    isLoading?: boolean;\n}\n\nconst CreatePost = ({ addPost, isLoading }: MTP): JSX.Element => {\n    const [input, setInput] = useState('');\n    const [textarea, setTextarea] = useState('');\n\n    const onChangeInput = (e): void => {\n        setInput(e.target.value);\n    };\n\n    const onChangeTextarea = (e): void => {\n        setTextarea(e.target.value);\n    };\n\n    const reset = (): void => {\n        setInput('');\n        setTextarea('');\n    };\n\n    const onSubmitForm = (e): void => {\n        e.preventDefault();\n        if (input && textarea) {\n            const newPost = {\n                title: input,\n                body: textarea,\n            };\n            addPost(newPost);\n            reset();\n            alert('Your post successfully added!');\n        }\n    };\n\n    return (\n        <>\n            {isLoading && <Loader />}\n            <Form onSubmit={onSubmitForm}>\n                <Input placeholder=\"Enter your title here\" value={input} onChange={onChangeInput} required />\n                <Textarea\n                    rows=\"20\"\n                    cols=\"20\"\n                    name=\"text\"\n                    placeholder=\"Enter your body here\"\n                    value={textarea}\n                    onChange={onChangeTextarea}\n                    required\n                ></Textarea>\n                <Button type=\"submit\">Add New Post</Button>\n            </Form>\n        </>\n    );\n};\n\nconst mapStateToProps = (store): MTP => ({\n    isLoading: blogSelectors.getLoader(store),\n});\n\nconst mapDispatchToProps = (dispatch): MTP => ({\n    addPost: (post): void => dispatch(blogOperations.createPost(post)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreatePost);\n"]},"metadata":{},"sourceType":"module"}